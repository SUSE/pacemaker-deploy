locals {
    iscsi_private_ip = cidrhost("{{ common.private_ip_range }}", 4)
}

resource "libvirt_volume" "iscsi_image_disk" {
    name             = "{{ name }}-iscsi-disk"
    pool             = local.storage_pool
    source           = "{{ iscsi.source_image }}"
    base_volume_name = "{{ iscsi.volume_name }}"
}

resource "libvirt_volume" "iscsi_device_disk" {
    name  = "{{ name }}-iscsi-device"        
    pool  = local.storage_pool
    size  = {{ iscsi.disk_size * 1024 *1204 *1024 }}
}

resource "libvirt_domain" "iscsi_domain" {
    name       = "{{ name }}-iscsi"        
    vcpu       = {{ iscsi.cpus }}
    memory     = {{ iscsi.memory }}
    qemu_agent = true

    dynamic "disk" {
        for_each = [
            {
                "vol_id" = libvirt_volume.iscsi_image_disk.id
            },
            {
                "vol_id" = libvirt_volume.iscsi_device_disk.id
            }
        ]

        content {
            volume_id = disk.value.vol_id
        }
    }

    network_interface {
        wait_for_lease = true
        network_id     = local.public_network_id
        bridge         = local.public_bridge
    }

    network_interface {
        wait_for_lease = false
        network_id     = local.private_network_id
        hostname       = "{{ name }}-iscsi"
        addresses      = [ local.iscsi_private_ip ]
    }

    console {
        type        = "pty"
        target_port = "0"
        target_type = "serial"
    }

    console {
        type        = "pty"
        target_type = "virtio"
        target_port = "1"
    }

    graphics {
        type        = "spice"
        listen_type = "address"
        autoport    = true
    }

    cpu = {
        mode = "host-passthrough"
    }
}

output "iscsi_private_ip" {
    value = local.iscsi_private_ip
}

output "iscsi_public_ip" {
    value = libvirt_domain.iscsi_domain.network_interface.0.addresses.0
}

output "iscsi_name" {
    value = libvirt_domain.iscsi_domain.name
}
