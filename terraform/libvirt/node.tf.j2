{% set n = '{:0>2}'.format(index) %}

locals {
    node{{ n }}_private_ip = cidrhost("{{ common.private_ip_range }}", 10 + {{ index }})
}

resource "libvirt_volume" "node{{ n }}_image_disk" {
    name             = "{{ name }}-node{{ n }}-main-disk"
    pool             = local.storage_pool
    source           = "{{ node[index].source_image }}"
    base_volume_name = "{{ node[index].volume_name }}"
}

/*
resource "libvirt_volume" "node{{ n }}_data_disk" {
    name  = "{{ name }}-node{{ n }}-node-disk"
    pool  = localstorage_pool
    size  = {{ node[index].disk_size }}
}
*/

resource "libvirt_domain" "node{{ n }}_domain" {
    name       = "{{ name }}-node{{ n }}"
    vcpu       = {{ node[index].cpus }}
    memory     = {{ node[index].memory }}
    qemu_agent = true

    dynamic "disk" {
        for_each = [
            {
                "vol_id" = libvirt_volume.node{{ n }}_image_disk.id
            }
        ]

        content {
            volume_id = disk.value.vol_id
        }
    }
    
    /*
    dynamic "disk" {
        for_each = [
            {
                "vol_id" = libvirt_volume.node{{ n }}_image_disk.id
            },
            {
                "vol_id" = libvirt_volume.node{{ n }}_data_disk.id
            },
        ]

        content {
            volume_id = disk.value.vol_id
        }
    }
    */

{% if common.shared_storage_type == "shared-disk" %}    
    dynamic "disk" {
        for_each = slice(
            [
                {
                    "volume_id" = libvirt_volume.shared_disk.id
                },
            ], 0, 1
        )

        content {
            volume_id = disk.value.volume_id
        }
    }
{% endif %}

    network_interface {
        wait_for_lease = true
        network_id     = local.public_network_id
        bridge         = local.public_bridge
    }

    network_interface {
        wait_for_lease = false
        network_id     = local.private_network_id
        hostname       = "{{ name }}-node{{ n }}"
        addresses      = [ local.node{{ n }}_private_ip ]
    }

    xml {
        xslt = file("node.xsl")
    }

    console {
        type        = "pty"
        target_port = "0"
        target_type = "serial"
    }

    console {
        type        = "pty"
        target_type = "virtio"
        target_port = "1"
    }

    graphics {
        type        = "spice"
        listen_type = "address"
        autoport    = true
    }

    cpu = {
        mode = "host-passthrough"
    }
}

output "node{{n}}_private_ip" {
    value = local.node{{ n }}_private_ip
}

output "node{{n}}_public_ip" {
    value = libvirt_domain.node{{ n }}_domain.network_interface.0.addresses.0
}

output "node{{n}}_name" {
    value = libvirt_domain.node{{ n }}_domain.name
}
